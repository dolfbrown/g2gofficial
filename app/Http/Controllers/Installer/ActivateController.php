<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.1   |
    |              on 2021-06-06 11:53:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; use Illuminate\Routing\Controller; class ActivateController extends Controller { public function activate() { if ($this->checkDatabaseConnection()) { goto bIZ82; } return redirect()->back()->withErrors(["\144\141\164\x61\142\141\x73\145\x5f\143\157\156\x6e\145\x63\x74\151\157\x6e" => trans("\x69\x6e\x73\x74\x61\154\x6c\145\162\x5f\155\145\163\x73\141\147\x65\x73\x2e\145\156\166\x69\x72\x6f\156\x6d\145\156\x74\56\x77\151\172\141\162\x64\56\x66\157\x72\155\x2e\x64\142\x5f\143\157\x6e\156\145\x63\164\x69\157\156\137\146\141\x69\x6c\145\144")]); bIZ82: return view("\x69\x6e\x73\x74\141\x6c\154\x65\162\56\x61\143\164\151\166\141\164\x65"); } public function verify(Request $request) { $mysqli_connection = getMysqliConnection(); if ($mysqli_connection) { goto A_xMF; } return redirect()->route("\x49\156\x73\164\141\154\x6c\x65\162\x2e\x61\x63\164\x69\x76\x61\x74\145")->with(["\146\x61\x69\154\x65\x64" => trans("\162\145\x73\160\x6f\156\163\145\x73\x2e\144\x61\x74\x61\x62\141\163\145\x5f\143\157\x6e\x6e\145\143\164\151\x6f\x6e\x5f\146\x61\x69\154\x65\144")])->withInput($request->all()); A_xMF: $purchase_verification = aplVerifyEnvatoPurchase($request->purchase_code); if (empty($purchase_verification)) { goto dLkLR; } return redirect()->route("\x49\x6e\x73\x74\x61\154\154\x65\162\56\141\x63\164\x69\x76\x61\164\145")->with(["\x66\141\151\x6c\145\x64" => "\103\x6f\x6e\x6e\x65\143\164\x69\157\156\x20\164\x6f\40\x72\145\155\x6f\x74\x65\x20\163\145\162\x76\x65\x72\x20\x63\x61\x6e\x27\x74\40\x62\145\x20\145\x73\x74\141\x62\154\x69\x73\x68\145\144"])->withInput($request->all()); dLkLR: $license_notifications_array = incevioVerify($request->root_url, $request->email_address, $request->purchase_code, $mysqli_connection); if (!($license_notifications_array["\x6e\157\x74\151\146\x69\143\x61\x74\x69\x6f\x6e\137\x63\141\163\145"] == "\x6e\157\164\151\146\x69\x63\141\x74\x69\x6f\156\x5f\x6c\151\x63\145\156\163\x65\137\x6f\x6b")) { goto FEPb7; } return view("\x69\x6e\x73\164\x61\154\x6c\x65\162\56\x69\x6e\x73\x74\x61\154\154", compact("\x6c\151\x63\x65\156\163\145\x5f\x6e\x6f\x74\x69\146\x69\143\x61\164\151\157\x6e\x73\x5f\141\162\x72\141\171")); FEPb7: if (!($license_notifications_array["\156\x6f\164\151\146\x69\143\141\x74\x69\157\x6e\x5f\x63\141\163\x65"] == "\x6e\x6f\x74\151\146\151\x63\141\x74\151\157\x6e\x5f\141\x6c\162\145\x61\144\x79\x5f\x69\156\x73\x74\x61\154\154\145\144")) { goto I8xNd; } $license_notifications_array = incevioAutoloadHelpers($mysqli_connection, 1); if (!($license_notifications_array["\156\x6f\x74\151\x66\151\x63\x61\164\x69\157\156\x5f\x63\141\163\x65"] == "\x6e\x6f\x74\151\146\x69\x63\x61\x74\x69\x6f\156\137\x6c\x69\x63\x65\x6e\x73\145\x5f\157\x6b")) { goto TZN22; } return view("\x69\x6e\x73\x74\141\154\154\x65\162\x2e\151\x6e\x73\x74\x61\154\154", compact("\154\151\143\x65\156\163\x65\x5f\x6e\157\164\x69\x66\x69\x63\141\x74\x69\x6f\x6e\163\x5f\x61\162\162\141\171")); TZN22: I8xNd: return redirect()->route("\111\x6e\163\164\x61\x6c\154\145\x72\x2e\141\x63\164\151\166\x61\x74\145")->with(["\x66\141\x69\154\x65\x64" => $license_notifications_array["\x6e\x6f\x74\151\x66\x69\x63\141\x74\x69\157\156\x5f\164\x65\170\x74"]])->withInput($request->all()); } private function checkDatabaseConnection() { try { DB::connection()->getPdo(); return true; } catch (Exception $e) { return false; } } private function response($message, $status = "\144\141\156\147\145\162") { return ["\163\x74\141\x74\165\x73" => $status, "\x6d\x65\163\163\141\147\145" => $message]; } }
