<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.1   |
    |              on 2021-06-06 11:53:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\155\151\x67\162\141\x74\x65", ["\55\x2d\146\157\162\143\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\157\x72", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\144\x62\x3a\163\145\x65\x64", ["\55\55\x66\x6f\x72\143\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\x65\162\x72\157\x72", $outputLog); } return $this->response(trans("\151\156\x73\x74\141\x6c\154\x65\162\137\x6d\145\x73\x73\x61\147\x65\x73\56\x66\151\x6e\x61\154\x2e\146\x69\x6e\x69\163\x68\x65\x64"), "\163\165\143\143\145\163\163", $outputLog); } public function seedDemoData() { ini_set("\x6d\x61\170\x5f\145\170\x65\143\165\164\x69\x6f\x6e\x5f\164\151\x6d\x65", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\151\156\143\x65\x76\x69\157\x3a\144\x65\x6d\x6f"); } catch (Exception $e) { return $this->response($e->getMessage(), "\x65\162\162\157\162", $outputLog); } return $this->response(trans("\151\156\163\x74\141\154\x6c\145\162\137\x6d\145\x73\x73\x61\147\145\163\56\x66\151\156\x61\154\x2e\x66\151\x6e\x69\x73\x68\145\x64"), "\163\x75\x63\x63\145\x73\163", $outputLog); } private function response($message, $status = "\x64\141\x6e\147\145\x72", $outputLog) { return ["\163\164\141\x74\x75\163" => $status, "\x6d\145\x73\163\x61\147\145" => $message, "\x64\x62\117\x75\164\160\x75\x74\x4c\x6f\147" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto Ab25C; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto N2nJv; } touch($database); DB::reconnect(Config::get("\144\x61\x74\x61\142\141\163\145\x2e\x64\x65\146\x61\165\x6c\164")); N2nJv: $outputLog->write("\x55\163\151\x6e\147\40\x53\161\154\x4c\151\164\x65\x20\x64\x61\164\x61\x62\141\x73\x65\x3a\x20" . $database, 1); Ab25C: } }
